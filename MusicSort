#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <algorithm>
using namespace std;

const int MAXIMUM = 4;
const int MINIMUM = 2;

class BTree {
    struct Node {
        string artist;
        string track;
        int year;
        string genre;
        struct Node* parent;
        string element[MAXIMUM];
        struct Node* child[MAXIMUM];
    };
    using NODE = Node*;
    NODE root;

public:
    BTree() {
        root = createNode();
    }
    void readFile(ifstream& myFile) {
        // myFile.open("musicdata.txt");
        string firstLine = "";
        if (myFile.is_open()) {
            getline(myFile, firstLine);
            while (myFile.good()) {
                // Artist name
                string artistName = "";
                getline(myFile, artistName, '\t');
                // Track name
                string trackName = "";
                getline(myFile, trackName, '\t');
                // Year
                string releaseYear = "";
                getline(myFile, releaseYear, '\t');
                // Genre
                string genreName = "";
                getline(myFile, genreName);
                if (isdigit(releaseYear[0])) {
                    insertElement(artistName, trackName, stoi(releaseYear), genreName);
                }
            }
        }
    }
    // finds if key is present
    int search(string track) {
        NODE current = findLeaf(root, track);
        if (current == NULL) {
            return 1;
        }
        return 0;
    }
    // creates new node where elements are set to -1 and child to null
    static NODE createNode() {
        NODE current = new struct Node;
        for (int i = 0; i < MAXIMUM; i++) {
            current->element[i] = "";
            current->child[i] = NULL;
        }
        current->parent = NULL;
        return current;
    }
    // sorts elements in ascending order
    static void sortNode(NODE n) {
        string currTrack;
        NODE currChild;
        for (int i = 0; i < MAXIMUM && n->element[i] != ""; i++) {
            for (int j = i + 1; j< MAXIMUM && n->element[j] != ""; j++) {
                if (n->element[i] > n->element[j]) {
                    currTrack = n->element[i];
                    currChild = n->child[i];

                    n->element[i] = n->element[j];
                    n->child[i] = n->child[j];

                    n->element[j] = currTrack;
                    n->child[j] = currChild;
                }
            }
        }
    }

    // recursively searches the tree for the node where the key should be inserted
    NODE findLeaf(NODE n, string track) {
        if (n->child[0] == NULL) {
            for (string s : n->element)
                if (track == s) {
                    return NULL;
                }
            return n;
        }
        for (int i = 0; i < MAXIMUM; i++) {
            if (n->element[i] >= track) {
                return findLeaf(n->child[i], track);
            }
            if (n->element[i] == "") {
                return findLeaf(n->child[i - 1], track);
            }
        }
        return findLeaf(n->child[MAXIMUM - 1], track);
    }

    // creates new node
    NODE newRootNode(NODE n, NODE current) {
        NODE root = createNode();

        root->element[0] = n->element[MINIMUM - 1];
        root->child[0] = n;
        root->element[1] = n->element[MAXIMUM-1];
        root->child[1] = current;

        n->parent = root;
        current->parent = root;

        return root;
    }
    // takes a node and adds to parent
    void appendToParent(NODE n, NODE current) {
        for (int i = 0; i < MAXIMUM; i++) {
            if (n->parent->element[i] == n->element[MAXIMUM - 1]) {
                n->parent->child[i] = current;
            }
            if (n->parent->element[i] == "") {
                n->parent->element[i] = n->element[MINIMUM - 1];
                n->parent->child[i] = n;
                break;
            }
        }
    }

    // updates parent of n to new value
    void updateParent(NODE n, string track, string top) {
        string current = "";
        for (int i = 0; i < MAXIMUM && (n->element[i] != ""); i++) {
            if (n->element[i] == top) {
                n->element[i] = track;
            }
            if (n->element[i] > current) {
                current = n->element[i];
            }
        }
        if (track > current && n->parent != NULL) {
            updateParent(n->parent, track, top);
        }
    }

    // if element is not full, inserts to tree and sort
    void insertElement(string artist, string track, int year, string genre) {
        string max;
        NODE current = findLeaf(root, track);
        if (!current) {
            cout << "Integer already inserted in the tree\n";
            return;
        }
        if (!isFull(current)) {
            cout << "Element inserted\n";
            for (string& i : current->element) {
                if (i == "") {
                    i = track;
                    current->artist = artist;
                    current->track = track;
                    current->year = year;
                    current->genre = genre;
                    break;
                }
                max = i;
            }
            sortNode(current);
            if (track > max && current->parent != NULL) {
                updateParent(current->parent, track, max);
            }
            return;
        }
        else {
            splitNode(current);
            insertElement(artist, track, year, genre);
        }
    }

    // checks if full
    static int isFull(NODE n) {
        if (n->element[MAXIMUM - 1] == "") {
            return 0;
        } else {
            return 1;
        }
    }

    // splits into 2 nodes
    void splitNode(NODE x) {
        NODE current;
        if (x->parent == NULL) {
            current = createNode();
            root = newRootNode(x, current);
        }
        else {
            if (isFull(x->parent)) {
                splitNode(x->parent);
            }

            current = createNode();
            current->parent = x->parent;
            appendToParent(x, current);
        }
        for (int i = 0; i < MINIMUM; i++) {
            current->element[i] = x->element[MINIMUM + i];
            x->element[MINIMUM + i] = -1;
            current->child[i] = x->child[MINIMUM + i];
            if (current->child[i] != NULL) {
                current->child[i]->parent = current;
            }
            x->child[MINIMUM + i] = NULL;
        }
        sortNode(x->parent);
    }

    void printTree() {
        NODE queue[50];
        int f = 0, r = -1, level = -1;
        queue[++r] = NULL;
        queue[++r] = root;
        while (f < r) {
            if (queue[f] == NULL) {
                cout<<"\nLevel: "<< ++level << endl;
                if (queue[r] != NULL) {
                    queue[++r] = NULL;
                }
                f++;
            } else {
                for (int i = 0; i < MAXIMUM; i++) {
                    if (queue[f]->element[i] != "") {
                        cout << queue[f]->element[i] << " ";
                    }
                    if (queue[f]->child[i] != NULL) {
                        queue[++r] = queue[f]->child[i];
                    }
                }
                cout << "      ";
                f++;
            }
        }
    }
};

class SplayTree {
public:
    class Node {
    public:
        string artist;
        string track;
        int year = 0;
        string genre;
        long height = 0;
        Node* left = nullptr;
        Node* right = nullptr;
        Node(string artist, string track, int year, string genre): artist(artist), track(track), year(year), genre(genre), height(0), left(nullptr), right(nullptr) {}
    };
    Node* root = nullptr;
    long numNodes = 0;

    /// Function Definitions:
    // Helper function to insert to properly set the value of root and prevent an infinite loop.
    void insert (string artist, string track, int year, string genre) {
        // TODO: Are insert and splay gonna compete for making the root?
        root = insertFunction(root, artist, track, year, genre);
        root = splay(root, track);
    }
    // Method to construct the tree, adding new nodes.
    Node* insertFunction(Node* node, string artist, string track, int year, string genre) {
        if (node == nullptr) {
            numNodes++;
            Node *tempNode = new Node(artist, track, year, genre);
            return tempNode;
        }
        if (track < node->track) {
            node->left = insertFunction(node->left, artist, track, year, genre);
        } else if (track > node->track) {
            node->right = insertFunction(node->right, artist, track, year, genre);
        }
        return node;
    }
    void readFile(ifstream& myFile) {
        myFile.open("musicdata.txt");
        string firstLine = "";
        if (myFile.is_open()) {
            getline(myFile, firstLine);
            ///Node* currentNode; // Giving me segmentation fault for some reason, but should be similar node setup to Project 1. Lines that use currentNode commented with green
            while (myFile.good()) {
                // Artist name - currentNode->artist = currentLine instead of push_back
                string artistName = "";
                getline(myFile, artistName, '\t');
                // Track name - currentNode->track = currentLine instead of push_back
                string trackName = "";
                getline(myFile, trackName, '\t');
                // Year
                string releaseYear = "";
                getline(myFile, releaseYear, '\t');
                // Genre
                string genreName = "";
                getline(myFile, genreName);
                if (isdigit(releaseYear[0])) {
                    insert(artistName, trackName, stoi(releaseYear), genreName);
                }
            }
        }
    }
    // Helper function call for remove without needing to call a Node* in main.
    void remove(bool isTrack, string removeThis) {
        // Convert to track name if necessary - removeFunction only works with the names of tracks.
        if (!isTrack) {
            removeThis = search(false, removeThis);
        }
        root = removeFunction(root, removeThis);
    }
    // Method used to delete nodes from the tree.
    Node* removeFunction(Node *node, string track) {
        // Check to see if a tree exists.
        if (node == nullptr) {
            return node;
        }
        // Iterate through loop - go left if need a smaller ID, go right if need a bigger ID
        if (node->track > track) {
            node->left = removeFunction(node->left, track);
        } else if (node->track < track) {
            node->right = removeFunction(node->right, track);
        } else {
            numNodes--;
            // If no children...
            if (node->left == nullptr && node->right == nullptr) {
                return nullptr;
            }
                // If only one child on left
            else if (node->left != nullptr && node->right == nullptr) {
                Node* tempNode = node->left;
                free(node);
                node = tempNode;
            }
                // If only one child on right
            else if (node->left == nullptr && node->right != nullptr) {
                Node* tempNode = node->right;
                free(node);
                node = tempNode;
            }
                // If two children
            else {
                Node* inorderSuccessor = findInorderSuccessor(node);
                node->artist = inorderSuccessor->artist;
                node->track = inorderSuccessor->track;
                node->year = inorderSuccessor->year;
                node->genre = inorderSuccessor->genre;
                node->right = removeFunction(node->right, inorderSuccessor->track);
                numNodes++;
            }
        }
        return node;
    }
    // Helper function to get the inorder successor
    Node* findInorderSuccessor(Node* node) {
        Node* currentNode = node;
        currentNode = currentNode->right;
        while (currentNode->left != nullptr) {
            currentNode = currentNode->left;
        }
        return currentNode;
    }
    // Helper function allowing a call of search without requiring the use of a node in main. Also used to print unsuccessful for faulty searches.
    string search(bool returnAll, string searchThis) {
        bool matchFound = false;
        searchFunction(root, returnAll, searchThis, matchFound);
        if (!matchFound) {
            cout << "No match to the inputted song found!" << endl;
        }
        else {
            root = splay(root, searchThis);
        }
        return searchThis;
    }
    void searchFunction(Node *node, bool returnAll, string& searchThis, bool& matchFound) {
        // Check to see if a tree exists.
        if (node != nullptr) {
            // If goal is to output all the data for the searched node
            if (searchThis == node->artist || searchThis == node->track || (isdigit(searchThis[0]) && stoi(searchThis) == node->year) || searchThis == node->genre) {
                matchFound = true;
                if (returnAll) {
                    // Search, as used to relay song information
                    cout << "Artist: " << node->artist << ", Track: " << node->track << ", Release Year: " << node->year << ", Genre: " << node->genre << endl;
                    return;
                }
                else {
                    // Search, as used to identify track name
                    searchThis = node->track;
                    return;
                }
                root = splay(node, node->track);
            }
            searchFunction(node->left, returnAll, searchThis, matchFound);
            searchFunction(node->right, returnAll, searchThis, matchFound);
        }
    }
    Node* splay(Node* node, string track) {
        // If node doesnt exist or the track being sought is found recursively, return it.
        if (node == nullptr || node->track == track) {
            return node;
        }
        if (node->track > track) {
            if (node->left == nullptr) {
                return node;
            }
            if (node->left->track > track) { // Zig Zig
                node->left->left = splay(node->left->left, track);
                node = rotateRight(node);
            }
            else if (node->left->track < track) { // Zig Zag
                node->left->right = splay(node->left->right, track);
                if (node->left->right != nullptr) {
                    node->left = rotateLeft(node->left);
                }
            }
            if (node->left != nullptr) {
                return rotateRight(node);
            }
            else {
                return node;
            }
        }
        else {
            if (node->right == nullptr) {
                return node;
            }
            if (node->right->track > track) { // Zig Zag
                node->right->left = splay(node->right->left, track);
                if (node->right->left != nullptr) {
                    node->right = rotateRight(node->right);
                }
            }
            else if (node->right->track < track) { // Zag Zag
                node->right->right = splay(node->right->right, track);
                node = rotateLeft(node);
            }
            if (node->right != nullptr) {
                return rotateLeft(node);
            }
            else {
                return node;
            }
        }
    }
    // Helper function for left rotate
    Node* rotateLeft(Node* node) { // Left, Splay(x), x is right of parent and has no grandparent)
        // nodeR represents the inputted node's right child, nodeRL represents nodeR's left child.
        Node* nodeR = node->right;
        Node* nodeRL = nodeR->left;
        // Move original node so that it is nodeR's new left child.
        nodeR->left = node;
        // Move nodeR's original left child so that it is now the inputted node's right child.
        node->right = nodeRL;
        return nodeR;
    }
    // Helper function for right rotate
    Node* rotateRight(Node* node) { // Right, Splay(x), x is left of parent and has no grandparent
        // nodeL represents the inputted node's left child, nodeLR represents nodeL's right child.
        Node* nodeL = node->left;
        Node* nodeLR = nodeL->right;
        // Move original node so that it is nodeL's new right child.
        nodeL->right = node;
        // Move nodeL's original right child so that it is now the inputted node's left child.
        node->left = nodeLR;
        return nodeL;
    }
    void printPreorder() {
        vector<Node*> preorderResults;
        findPreorder(root, preorderResults);
        if (preorderResults.size() == numNodes && root != nullptr) {
            for (int i = 0; i < preorderResults.size(); i++) {
                cout << "Artist: " << preorderResults[i]->artist << ", Track: " << preorderResults[i]->track << ", Release Year: " << preorderResults[i]->year << ", Genre: " << preorderResults[i]->genre << endl;
            }
            return;
        }
        else {
            cout << "unsuccessful" << endl;
        }
    }
    void findPreorder(Node* node, vector<Node*>& preorderResults) {
        // Check to see if a tree exists.
        if (node != nullptr) {
            preorderResults.push_back(node);
            findPreorder(node->left, preorderResults);
            findPreorder(node->right, preorderResults);
        }
    }
    void printInorder() {
        vector<Node*> inorderResults;
        findInorder(root, inorderResults);
        if (inorderResults.size() == numNodes && root != nullptr) {
            for (int i = 0; i < inorderResults.size(); i++) {
                cout << "Artist: " << inorderResults[i]->artist << ", Track: " << inorderResults[i]->track << ", Release Year: " << inorderResults[i]->year << ", Genre: " << inorderResults[i]->genre << endl;
            }
            return;
        }
        else {
            cout << "unsuccessful" << endl;
        }
    }
    void findInorder(Node* node, vector<Node*>& inorderResults) {
        // Check to see if a tree exists.
        if (node != nullptr) {
            findInorder(node->left, inorderResults);
            inorderResults.push_back(node);
            findInorder(node->right, inorderResults);
        }
    }
    void printPostorder() {
        vector<Node*> postorderResults;
        findPostorder(root, postorderResults);
        if (postorderResults.size() == numNodes && root != nullptr) {
            for (int i = 0; i < postorderResults.size(); i++) {
                cout << "Artist: " << postorderResults[postorderResults.size() - 1]->artist << ", Track: " << postorderResults[postorderResults.size() - 1]->track << ", Release Year: " << postorderResults[postorderResults.size() - 1]->year << ", Genre: " << postorderResults[postorderResults.size() - 1]->genre << endl;
            }
            return;
        }
        else {
            cout << "unsuccessful" << endl;
        }
    }
    void findPostorder(Node* node, vector<Node*>& postorderResults) {
        // Check to see if a tree exists.
        if (node != nullptr) {
            findPostorder(node->left, postorderResults);
            findPostorder(node->right, postorderResults);
            postorderResults.push_back(node);
        }
    }
};

int main() {
    ifstream myFile;
    myFile.open("musicdata.txt");

    cout << "Music Sorter and Organizer" << endl;
    cout << "Created by Ryan Coveny and Emily Tran" << endl << endl;

    cout << "Which data structure would you like to use for implementation?" << endl;
    cout << "1. B+ Tree" << endl;
    cout << "2. Splay Tree" << endl;

    string input;
    while (true) {
        cin >> input;
        cin.ignore();
        if (input == "1" || input == "2") {
            break;
        }
        else {
            cout << "Input a number between 1 and 4." << endl;
        }
    }

    if (input == "1") {
        // B Tree code
        BTree bCall;
        bCall.readFile(myFile);

        while (true) {
            cout << endl << "What would you like to do? (Input a number)" << endl;
            cout << "1. Add a new song to the database." << endl;
            cout << "2. Display all music in the database." << endl;
            cout << "3. Search within the database." << endl;
            cout << "4. Exit program." << endl;

            input = "";
            while (true) {
                getline(cin, input);
                if (input == "1") {
                    string trackName;
                    string artistName;
                    int releaseYear;
                    string genreName;

                    cout << "What is the name of the song to be inserted?" << endl;
                    getline(cin, trackName);
                    cout << "What is the name of the song's artist?" << endl;
                    getline(cin, artistName);
                    cout << "What year was the song released?" << endl;
                    cin >> releaseYear;
                    cin.ignore();
                    cout << "What genre does the song belong to?" << endl;
                    getline(cin, genreName);

                    bCall.insertElement(artistName, trackName, releaseYear, genreName);
                    break;
                }
                else if (input == "2") {
                    cout << "Displaying the database's information..." << endl;

                    bCall.printTree();
                    break;
                }
                else if (input == "3") {
                    string trackName;

                    cout << "What is the name of the song to be searched for?" << endl;
                    getline(cin, trackName);

                    //bCall.search(trackName);
                    break;
                }
                else if (input == "4") {
                    cout << "Closing program.";
                    return 0;
                }
                else {
                    cout << "Input a number between 1 and 4." << endl;
                }
            }
        }
    }
    else {
        // Splay code
        SplayTree splayCall;
        splayCall.readFile(myFile);

        while (true) {
            cout << endl << "What would you like to do? (Input a number)" << endl;
            cout << "1. Add a new song to the database." << endl;
            cout << "2. Display all music in the database." << endl;
            cout << "3. Search within the database." << endl;
            cout << "4. Exit program." << endl;

            input = "";
            while (true) {
                getline(cin, input);
                if (input == "1") {
                    string trackName;
                    string artistName;
                    int releaseYear;
                    string genreName;

                    cout << "What is the name of the song to be inserted?" << endl;
                    getline(cin, trackName);
                    cout << "What is the name of the song's artist?" << endl;
                    getline(cin, artistName);
                    cout << "What year was the song released?" << endl;
                    cin >> releaseYear;
                    cin.ignore();
                    cout << "What genre does the song belong to?" << endl;
                    getline(cin, genreName);

                    splayCall.insert(artistName, trackName, releaseYear, genreName);
                    break;
                }
                else if (input == "2") {
                    cout << "How would you like the database to be displayed?" << endl;

                    cout << "Displaying the database's information..." << endl;

                    splayCall.printInorder();
                    break;
                }
                else if (input == "3") {
                    string trackName;

                    cout << "What is the name of the song to be searched for?" << endl;
                    getline(cin, trackName);

                    splayCall.search(true, trackName);
                    break;
                }
                else if (input == "4") {
                    cout << "Closing program.";
                    return 0;
                }
                else {
                    cout << "Input a number between 1 and 4." << endl;
                }
            }
        }
    }
}
